
@inproceedings{Chlipala2008,
  author = {Chlipala, Adam},
  booktitle = {{{ACM SIGPLAN Notices}}},
  doi = {10.1145/1411204.1411226},
  file = {/home/uma/references/papers/Chlipala_2008_Parametric Higher-Order Abstract Syntax for Mechanized Semantics.pdf},
  month = sep,
  pages = {143-156},
  title = {Parametric {{Higher}}-{{Order Abstract Syntax}} for {{Mechanized Semantics}}},
  volume = {43},
  year = {2008}
}

@misc{CoqDeveloperCommunity,
  author = {{Coq Developer Community}},
  howpublished = {https://coq.inria.fr/},
  journal = {The Coq Proof Assistant},
  title = {The {{Coq Proof Assistant}}}
}

@article{Coquand1985,
  author = {Coquand, Thierry and Huet, G{\'e}rard},
  doi = {https://doi.org/10.1016/0890-5401(88)90005-3},
  file = {/home/uma/references/papers/Coquand_Huet_1985_The Calculus of Constructions.pdf},
  issn = {0890-5401},
  journal = {Information and Computation},
  number = {2},
  pages = {95-120},
  title = {The {{Calculus}} of {{Constructions}}},
  volume = {76},
  year = {1985}
}

@inproceedings{Coquand1989,
  author = {Coquand, Thierry and Paulin, Christine},
  booktitle = {{{COLOG}}-88},
  editor = {{Martin-L{\"o}f}, Per and Mints, Grigori},
  isbn = {978-3-540-46963-6},
  keywords = {Computation Rule,Elimination Rule,Inductive Type,Positive Operator,Type Theory},
  language = {en},
  pages = {50-66},
  publisher = {{Springer Berlin Heidelberg}},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  title = {Inductively Defined Types},
  year = {1989}
}

@incollection{Dardha2016,
  abstract = {In this chapter we introduce the encoding of session types into linear channel types and variant types and of session processes into standard \$\$\textbackslash{}pi \$\${$\pi$}-calculus processes.},
  author = {Dardha, Ornela},
  booktitle = {Type {{Systems}} for {{Distributed Programs}}: {{Components}} and {{Sessions}}},
  doi = {10.2991/978-94-6239-204-5_6},
  file = {/home/uma/references/papers/Dardha_2016_Session Types Revisited.pdf},
  isbn = {978-94-6239-203-8},
  month = jan,
  publisher = {{Springer}},
  title = {Session {{Types Revisited}}},
  year = {2016}
}

@inproceedings{deBruijn1972,
  author = {{de Bruijn}, Nicolaas Govert},
  booktitle = {Indagationes {{Mathematicae}} ({{Proceedings}})},
  pages = {381-392},
  publisher = {{Elsevier}},
  title = {Lambda {{Calculus Notation}} with {{Nameless Dummies}}, a {{Tool}} for {{Automatic Formula Manipulation}}, with {{Application}} to the {{Church}}-{{Rosser Theorem}}},
  volume = {75},
  year = {1972}
}

@inproceedings{Dezani-ciancaglini2010,
  author = {{Dezani-ciancaglini}, Mariangiola and De'Liguoro, Ugo},
  doi = {10.1007/978-3-642-14458-5_1},
  file = {/home/uma/references/papers/Dezani-ciancaglini_De'Liguoro_2010_Sessions and Session Types.pdf;/home/uma/references/papers/Dezani-ciancaglini_De'Liguoro_2010_Sessions and Session Types2.pdf},
  month = aug,
  pages = {1-28},
  title = {Sessions and {{Session Types}}: {{An Overview}}},
  year = {2010}
}

@phdthesis{Dilmore2019,
  author = {Dilmore, Eric},
  school = {School of Computing Science, University of Glasgow},
  title = {Pi-{{Calculus Session Types}} in {{Coq}}},
  type = {Master's {{Thesis}}},
  year = {2019}
}

@article{Dreyer2018,
  acmid = {3158154},
  articleno = {66},
  author = {Jung, Ralf and Jourdan, Jacques-Henri and Krebbers, Robbert and Dreyer, Derek},
  doi = {10.1145/3158154},
  file = {/home/uma/references/papers/Jung et al_2017_RustBelt.pdf},
  issn = {2475-1421},
  issue_date = {January 2018},
  journal = {Proc. ACM Program. Lang.},
  keywords = {concurrency,logical relations,Rust,separation logic,type systems},
  location = {New York, NY, USA},
  month = dec,
  number = {POPL},
  numpages = {34},
  pages = {66:1-66:34},
  publisher = {{ACM}},
  title = {{{RustBelt}}: {{Securing}} the {{Foundations}} of the {{Rust Programming Language}}},
  volume = {2},
  year = {2017}
}

@inproceedings{Giunti2010,
  abstract = {We present a reconstruction of session types in a conventional pi calculus where types are qualified as linear or unrestricted. Linearly typed communication channels are guaranteed to occur in exactly one thread, possibly multiple times. We equip types with a constructor that denotes the two ends of a same communication channel. In order to assess the flexibility of the new type system, we provide three distinct encodings (from the linear lambda calculus, from the linear pi calculus, and from the pi calculus with polarized variables) into our system. For each language we present operational and typing correspondences, showing that our system effectively subsumes the linear pi calculus as well as foregoing works on session types.},
  author = {Giunti, Marco and Vasconcelos, Vasco T.},
  booktitle = {{{CONCUR}} 2010 - {{Concurrency Theory}}},
  editor = {Gastin, Paul and Laroussinie, Fran{\c c}ois},
  isbn = {978-3-642-15375-4},
  pages = {432-446},
  publisher = {{Springer Berlin Heidelberg}},
  title = {A {{Linear Account}} of {{Session Types}} in the {{Pi Calculus}}},
  year = {2010}
}

@inproceedings{Honda1993,
  abstract = {We formulate a typed formalism for concurrency where types denote freely composable structure of dyadic interaction in the symmetric scheme. The resulting calculus is a typed reconstruction of name passing process calculi. Systems with both the explicit and implicit typing disciplines, where types form a simple hierarchy of types, are presented, which are proved to be in accordance with each other. A typed variant of bisimilarity is formulated and it is shown that typed {$\beta$}-equality has a clean embedding in the bisimilarity. Name reference structure induced by the simple hierarchy of types is studied, which fully characterises the typable terms in the set of untyped terms. It turns out that the name reference structure results in the deadlock-free property for a subset of terms with a certain regular structure, showing behavioural significance of the simple type discipline.},
  author = {Honda, Kohei},
  booktitle = {{{CONCUR}}'93},
  editor = {Best, Eike},
  isbn = {978-3-540-47968-0},
  keywords = {Atomic Type,Constant Symbol,Dyadic Interaction,Functional Type,Reference Structure},
  language = {en},
  pages = {509-523},
  publisher = {{Springer Berlin Heidelberg}},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  title = {Types for Dyadic Interaction},
  year = {1993}
}

@incollection{Honda1998,
  abstract = {We introduce basic language constructs and a type discipline as a foundation of structured communication-based concurrent programming. The constructs, which are easily translatable into the summation-less asynchronous {$\pi$}-calculus, allow programmers to organise programs as a combination of multiple flows of (possibly unbounded) reciprocal interactions in a simple and elegant way, subsuming the preceding communication primitives such as method invocation and rendez-vous. The resulting syntactic structure is exploited by a type discipline `a la ML, which offers a high-level type abstraction of interactive behaviours of programs as well as guaranteeing the compatibility of interaction patterns between processes in a well-typed program. After presenting the formal semantics, the use of language constructs is illustrated through examples, and the basic syntactic results of the type discipline are established. Implementation concerns are also addressed.},
  address = {{Berlin, Heidelberg}},
  author = {Honda, Kohei and Vasconcelos, Vasco T. and Kubo, Makoto},
  booktitle = {Programming {{Languages}} and {{Systems}}},
  doi = {10.1007/BFb0053567},
  editor = {Goos, Gerhard and Hartmanis, Juris and {van Leeuwen}, Jan and Hankin, Chris},
  file = {/home/uma/.zotero/data/storage/FSEHSQGD/Honda et al. - 1998 - Language primitives and type discipline for struct.pdf},
  isbn = {978-3-540-64302-9 978-3-540-69722-0},
  language = {en},
  pages = {122-138},
  publisher = {{Springer Berlin Heidelberg}},
  title = {Language Primitives and Type Discipline for Structured Communication-Based Programming},
  volume = {1381},
  year = {1998}
}

@article{Kobayashi1999,
  author = {Kobayashi, Naoki and Pierce, Benjamin and N. Turner, David},
  doi = {10.1145/330249.330251},
  journal = {ACM Transactions on Programming Languages and Systems (TOPLAS)},
  month = dec,
  pages = {914-947},
  title = {Linearity and the {{Pi}}-{{Calculus}}},
  volume = {21},
  year = {1999}
}

@article{McBride2004,
  author = {McBride, Conor and McKinna, James},
  journal = {Journal of functional programming},
  number = {1},
  pages = {69-111},
  title = {The {{View}} from the {{Left}}},
  volume = {14},
  year = {2004}
}

@book{Milner1989,
  author = {Milner, R.},
  isbn = {978-0-13-114984-7},
  month = jan,
  publisher = {{Prentice-Hall, Inc.}},
  title = {Communication and {{Concurrency}}},
  year = {1989}
}

@inproceedings{Milner1991,
  author = {Milner, Robin},
  booktitle = {Handbook of Theoretical Computer Science (Vol. {{B}})},
  isbn = {978-0-444-88074-1},
  month = feb,
  pages = {1201-1242},
  publisher = {{MIT Press}},
  title = {Operational and Algebraic Semantics of Concurrent Processes},
  year = {1991}
}

@article{Petz,
  author = {Petz, Adam},
  file = {/home/uma/.zotero/data/storage/6SG39KD6/Petz - A Semantics for Attestation Protocols using Sessio.pdf},
  keywords = {check},
  language = {en},
  pages = {61},
  title = {A {{Semantics}} for {{Attestation Protocols}} Using {{Session Types}} in {{Coq}}}
}

@book{Sangiorgi2001,
  abstract = {From the Publisher:Mobile systems, whose components communicate and change their structure, now pervade the informational world and the wider world of which it is a part. The science of mobile systems is as yet immature, however. This book presents the pi-calculus, a theory of mobile systems. The pi-calculus provides a conceptual framework for understanding mobility, and mathematical tools for expressing systems and reasoning about their behaviors.
The book serves both as a reference for the theory and as an extended demonstration of how to use pi-calculus to describe systems and analyze their properties. It covers the basic theory of pi-calculus, typed pi-calculi, higher-order processes, the relationship between pi-calculus and lambda-calculus, and applications of pi-calculus to object-oriented design and programming.
The book is written at the graduate level, assuming no prior acquaintance with the subject, and is intended for computer scientists interested in mobile systems.},
  address = {{New York, NY, USA}},
  author = {Sangiorgi, Davide and Walker, David},
  isbn = {978-0-521-78177-0},
  publisher = {{Cambridge University Press}},
  shorttitle = {{{PI}}-{{Calculus}}},
  title = {{{PI}}-{{Calculus}}: {{A Theory}} of {{Mobile Processes}}},
  year = {2001}
}

@inproceedings{Takeuchi1994,
  abstract = {We present a small language \$\$\textbackslash{}backslashmathcal\{L\}\$\$and its typing system, starting from the idea of interaction, one of the important notions in parallel and distributed computing. \$\$\textbackslash{}backslashmathcal\{L\}\$\$is based on, apart from such constructs as parallel composition and process creation, three pairs of communication primitives which use the notion of a session, a semantically atomic chain of communication actions which can interleave with other such chains freely, for high-level abstraction of interactionbased computing. The three primitives enable programmers to elegantly describe complex interactions among processes with a rigorous type discipline similar to ML [4]. The language is given formal operational semantics and a type inference system, regarding which we prove that if a program is well-typed in the typing system, it never causes run-time error due to type inconsistent communication patterns, offering a new foundation for type discipline in parallel programming languages.},
  author = {Takeuchi, Kaku and Honda, Kohei and Kubo, Makoto},
  booktitle = {{{PARLE}}'94 {{Parallel Architectures}} and {{Languages Europe}}},
  editor = {Halatsis, Costas and Maritsas, Dimitrios and Philokyprou, George and Theodoridis, Sergios},
  isbn = {978-3-540-48477-6},
  pages = {398-413},
  publisher = {{Springer Berlin Heidelberg}},
  title = {An {{Interaction}}-{{Based Language}} and {{Its Typing System}}},
  year = {1994}
}

@inproceedings{Toninho2011,
  author = {Toninho, Bernardo and Caires, Lu{\'i}s and Pfenning, Frank},
  booktitle = {Proceedings of the 13th {{International ACM SIGPLAN Symposium}} on {{Principles}} and {{Practices}} of {{Declarative Programming}}},
  doi = {10.1145/2003476.2003499},
  isbn = {978-1-4503-0776-5},
  keywords = {process calculus,type theory},
  pages = {161-172},
  publisher = {{ACM}},
  series = {{{PPDP}} '11},
  title = {Dependent {{Session Types}} via {{Intuitionistic Linear Type Theory}}},
  year = {2011}
}

@incollection{Vasconcelos2009,
  author = {Vasconcelos, Vasco},
  booktitle = {Information and {{Computation}}},
  doi = {10.1007/978-3-642-01918-0_4},
  file = {/home/uma/references/papers/Vasconcelos_2009_Fundamentals of Session Types.pdf},
  month = may,
  pages = {158-186},
  title = {Fundamentals of {{Session Types}}},
  volume = {217},
  year = {2009}
}

@book{Wadler1989,
  abstract = {From the type of a polymorphic function we can derive a theorem that it satisfies. Every function of the same type satisfies the same theorem. This provides a free source of useful theorems, courtesy of Reynolds\&\#039; abstraction theorem for the polymorphic lambda calculus.},
  author = {Wadler, Philip},
  title = {Theorems for {{Free}}!},
  year = {1989}
}

@book{Walker1989,
  author = {Walker, David and Milner, Robin and Parrow, Joachim},
  file = {/home/uma/references/papers/Walker et al_1989_A Calculus of Mobile Processes (Parts I and II).pdf},
  month = jun,
  title = {A {{Calculus}} of {{Mobile Processes}} ({{Parts I}} and {{II}})},
  volume = {100},
  year = {1989}
}

@unpublished{Wing2002,
  author = {Wing, Jeannette M.},
  file = {/home/uma/references/papers/Wing_2002_FAQ on Pi-Calculus.pdf},
  month = dec,
  title = {{{FAQ}} on {{Pi}}-{{Calculus}}},
  year = {2002}
}


